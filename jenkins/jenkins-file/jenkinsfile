pipeline {
    agent any

    stages {
        stage('clone repo') {
            steps{
                deleteDir()
                git branch: 'master',
                url: 'https://github.com/manlyalex/node-todo'
            }
        }
        stage('ls') {
            steps{
                sh 'ls -l'
            }
        }
        stage('npm install') {
            steps{
                sh 'npm install'
            }
        } 
        stage('config') {
            steps{
                sh '''
                  git config --global user.name $USER_NAME
                  git config --global user.email $USER_EMAIL
                '''
            }
        }
        stage('create new version') {
            steps{
                sh "npm version patch -m "Bumped version %s."='attribute=${env.NEW_VERSION}'"
            }
        } 
        stage('Publish') {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'git_hub', usernameVariable: 'GIT_AUTHOR_NAME', passwordVariable: 'GIT_PASSWORD']]) {
                    sh('git push https://${GIT_AUTHOR_NAME}:${GIT_PASSWORD}github.com/manlyalex/node-todo.git master --tags')
                }
            }
        }
        stage ('Invoke_pipeline') {
            steps {
                build job: 'pipeline1', parameters: [
                string(name: 'VERSION_TO_DEPLOY', value: ${env.NEW_VERSION})
                ]
            }
        }
    }
}




pipeline {
    agent any

    stages {
        stage('clone repo') {
            steps{
                deleteDir()
                git branch: 'master',
                url: 'https://github.com/manlyalex/node-todo'
            }
        }
        stage('deploy app with version') {
            steps{
                sh '''
                #!bin/bash
                if [ $VERSION_TO_DEPLOY != "" ]; then
                git checkout tags/$VERSION_TO_DEPLOY -b jenkins-branch
                fi
                '''
            }
        }        
        stage ("SSH copy") {
          steps{
            withCredentials([sshUserPrivateKey(credentialsId: 'host-246', keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'username')]) {
              script{
              def remote = [:]
              remote.name = "root"
              remote.identityFile = "~/.ssh/id_rsa"
              remote.host = "192.168.100.246"
              remote.allowAnyHosts = true
              remote.user = "$username"
              
              sshPut remote: remote, from: '.', into: '/home/user/prod'
                    }
                }    
            }
        }
    }
}

newVersion = 'initial_value'
pipeline {
    agent any
    stages {
        stage (New version){
            steps {
                echo "${newVersion}"
                script {
                    newVersion = sh(script: 'npm version patch -m "Bumped version %s."', returnStdout: true).trim()
                }
            echo "${newVersion}"
            } 
        }

    }
}
